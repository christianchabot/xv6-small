# The xv6 kernel starts executing in this file. This file is linked with
# the kernel C code, so it can refer to kernel symbols such as init().
# The boot block (bootasm.S and bootmain.c) jumps to entry below.

.p2align 2
.text
.globl multiboot_header
multiboot_header:
  .long 0x1badb002
  .long 0
  .long (-0x1badb002)

# By convention, the _start symbol specifies the ELF entry point.
# Since we haven't set up virtual memory yet, our entry point is
# the physical address of 'entry'.
.globl _start
_start = (entry - 0x80000000) # (entry - KERNBASE)

# Entering xv6 on boot processor, with paging off.
.global entry
entry:
	# Turn on page size extension for 4Mbyte pages
	mov eax, cr4
	or eax, 0x00000010 # CR4_PSE 0x00000010
	mov cr4, eax

	# Set page directory
	mov eax, (entrypgdir - 0x80000000) # (entrypgdir - KERNBASE)
	mov cr3, eax

	# Turn on paging.
	mov eax, cr0
	or eax, 0x80010000 # (CR0_PG|CR0_WP)
	mov cr0, eax

	# Set up the stack pointer.
	mov esp, (stack + 4096) # (stack + KSTACKSIZE)

	# Jump to init(), and switch to executing at
	# high addresses. The indirect call is needed because
	# the assembler produces a PC-relative instruction
	# for a direct jump.
	mov eax, init
	jmp eax

#	.att_syntax for the above
#	mov $init, %eax
#	jmp *%eax

.comm stack, 4096

